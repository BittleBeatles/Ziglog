buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id "org.sonarqube" version "4.2.1.3168"
}

group = 'com.ziglog'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'com.auth0:java-jwt:4.2.1'

	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'com.vladsch.flexmark:flexmark-all:0.64.8'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.testng:testng:7.7.0'
	implementation 'org.testng:testng:7.1.0'
	implementation 'org.testng:testng:7.1.0'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

def generated = 'src/main/generated'

sourceSets {
	main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}


clean.doLast {
	delete file(generated)
}

sonar {
	properties {
		property "sonar.projectKey", "s09-final_S09P31A407_AYuTJzziJNFRHGwFYwNH"
		property "sonar.projectName", "S09P31A407"
		property "sonar.host.url", "http://ziglog.site:8999"
		property 'sonar.java.source', 17
		property 'sonar.junit.reportPaths', 'build/results'
		property 'encoding', 'UTF-8'
		property 'charSet', 'UTF-8'
		property "sonar.coverage.jacoco.xmlReportPaths", "path.xml"
		property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**"
	}
}
